/*
 * Copyright (c) 2017, Derwent Ready @ Drentsoft
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice, this
 *    list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 3. Neither the name of the copyright holder nor the names of its contributors 
 *    may be used to endorse or promote products derived from this software 
 *    without specific prior written permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
package com.drentsoft.cardresizer.ui;

import com.drentsoft.cardresizer.AlphaMode;
import com.drentsoft.cardresizer.OutputDimension;
import java.io.File;
import javax.swing.DefaultComboBoxModel;

/**
 *
 * @author Derwent Ready @ Drentsoft
 */
public class MaskSettingsPanel extends javax.swing.JPanel {

    OutputDimension dim;
    
    DefaultComboBoxModel alphaModesModel;
    
    boolean loaded = false;
    
    public MaskSettingsPanel() {
        initComponents();
        customInit();
    }
    
    /**
     * Creates new form MaskSettingsPanel
     * @param dim
     */
    public MaskSettingsPanel( OutputDimension dim ) {
        initComponents();
        setOutputDimension(dim);
        customInit();
    }
    
    public final void setOutputDimension( OutputDimension dim ) {
        this.dim = dim;
        setValues();
        loaded = true;
    }
    
    public final void customInit() {
        alphaModesModel = new DefaultComboBoxModel();
        for( AlphaMode item : AlphaMode.values() ) {
            alphaModesModel.addElement( item );
        }
        alphaModes.setModel(alphaModesModel);
    }
    
    public final void setValues() {        
        if( dim != null ) {
            if( dim.maskSettings.maskPath != null ) {
                maskField.setText(dim.maskSettings.maskPath.getAbsolutePath() );
            }
            maskRotSpin.setValue(Math.toDegrees(dim.maskSettings.maskRotation) );
            alphaSpin.setValue(dim.maskSettings.maskAlpha );
            setAlphaMode(dim.maskSettings.alphaMode );
        }
    }
    
    public void setAlphaMode( AlphaMode mode ) {
        for( int i = 0; i < alphaModesModel.getSize(); i++ ) {
            AlphaMode check = (AlphaMode) alphaModesModel.getElementAt(i);
            if( mode.equals(check) ) {
                System.out.println("Selecting " + check );
                alphaModes.setSelectedIndex( i );
                return;
            }
        }
        System.err.println("Couldn't find alpha mode. Setting default selection.");
        alphaModes.setSelectedIndex( 0 );
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        maskFieldLbl = new javax.swing.JLabel();
        maskField = new javax.swing.JTextField();
        clearMaskBtn = new javax.swing.JButton();
        setMaskBtn = new javax.swing.JButton();
        alphaSpin = new javax.swing.JSpinner();
        alphaModes = new javax.swing.JComboBox<>();
        maskRotLbl = new javax.swing.JLabel();
        maskRotSpin = new javax.swing.JSpinner();
        maskModeLbl = new javax.swing.JLabel();
        maskAlphaLbl = new javax.swing.JLabel();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Mask Settings"));

        maskFieldLbl.setText("Mask:");
        maskFieldLbl.setToolTipText("");

        maskField.setEditable(false);

        clearMaskBtn.setText("Clear Mask");
        clearMaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearMaskBtnActionPerformed(evt);
            }
        });

        setMaskBtn.setText("Set Mask");
        setMaskBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setMaskBtnActionPerformed(evt);
            }
        });

        alphaSpin.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        alphaSpin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alphaSpinStateChanged(evt);
            }
        });

        alphaModes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alphaModesActionPerformed(evt);
            }
        });

        maskRotLbl.setText("Rotation:");

        maskRotSpin.setModel(new javax.swing.SpinnerNumberModel(0, -360, 360, 90));
        maskRotSpin.setToolTipText("Applied before image rotation");
        maskRotSpin.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                maskRotSpinStateChanged(evt);
            }
        });

        maskModeLbl.setText("Mode:");

        maskAlphaLbl.setText("Alpha:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(maskFieldLbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(maskField))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(maskRotLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maskRotSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maskModeLbl))
                    .addComponent(clearMaskBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(setMaskBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(alphaModes, 0, 163, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(maskAlphaLbl)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alphaSpin, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(maskFieldLbl)
                    .addComponent(maskField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(setMaskBtn)
                    .addComponent(clearMaskBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(alphaModes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maskModeLbl)
                        .addComponent(alphaSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(maskAlphaLbl))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(maskRotLbl)
                        .addComponent(maskRotSpin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clearMaskBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearMaskBtnActionPerformed
        maskField.setText( "" );
        dim.maskSettings.setMaskPath(null);
    }//GEN-LAST:event_clearMaskBtnActionPerformed

    private void setMaskBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setMaskBtnActionPerformed
        File maskFile = (File) GlobalPanel.masksModel.getSelectedItem();
        dim.maskSettings.setMaskPath(maskFile);
        maskField.setText( maskFile.getAbsolutePath() );
    }//GEN-LAST:event_setMaskBtnActionPerformed

    private void alphaSpinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_alphaSpinStateChanged
        dim.maskSettings.setAlpha( Float.valueOf(alphaSpin.getValue().toString() ) );
        System.out.println("Alpha set to: " + dim.maskSettings.maskAlpha );
    }//GEN-LAST:event_alphaSpinStateChanged

    private void alphaModesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alphaModesActionPerformed
        if( !loaded ) {
            return;
        }
        AlphaMode selected = (AlphaMode) (alphaModes.getSelectedItem());
        for( AlphaMode item : AlphaMode.values() ) {
            if( item.getID() == selected.getID() ) {
                dim.maskSettings.setAlphaMode(  item );
                break;
            }
        }
        System.out.println("Alpha mode set to: " + dim.maskSettings.alphaMode );
    }//GEN-LAST:event_alphaModesActionPerformed

    private void maskRotSpinStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_maskRotSpinStateChanged
        dim.maskSettings.setRotation( Double.parseDouble(maskRotSpin.getValue().toString() ) );
        System.out.println("Alpha rotation set to: " + dim.maskSettings.maskRotation );
    }//GEN-LAST:event_maskRotSpinStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JComboBox<String> alphaModes;
    public javax.swing.JSpinner alphaSpin;
    private javax.swing.JButton clearMaskBtn;
    private javax.swing.JLabel maskAlphaLbl;
    private javax.swing.JTextField maskField;
    private javax.swing.JLabel maskFieldLbl;
    private javax.swing.JLabel maskModeLbl;
    private javax.swing.JLabel maskRotLbl;
    public javax.swing.JSpinner maskRotSpin;
    private javax.swing.JButton setMaskBtn;
    // End of variables declaration//GEN-END:variables
}
